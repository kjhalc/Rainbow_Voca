// ÌååÏùº ÏúÑÏπò: ui/AdminActivity.kt
package com.example.englishapp.ui

import android.graphics.Canvas
import android.graphics.Color
import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.widget.Toast
import androidx.activity.viewModels
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.ItemTouchHelper
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.englishapp.R
import com.example.englishapp.data.repository.UserProfile
import com.example.englishapp.databinding.ActivityAdminBinding
import com.example.englishapp.model.StudyMemberProfile
import com.example.englishapp.model.StudyRoom
import com.example.englishapp.utils.ApiResult
import com.example.englishapp.utils.StudentAdapter
import com.example.englishapp.viewmodel.AdminViewModel
import com.example.englishapp.viewmodel.AdminViewModelFactory
import it.xabaras.android.recyclerview.swipedecorator.RecyclerViewSwipeDecorator

class AdminActivity : AppCompatActivity() {

    private lateinit var binding: ActivityAdminBinding
    private val viewModel: AdminViewModel by viewModels {
        AdminViewModelFactory(application)
    }
    private lateinit var memberAdapter: StudentAdapter
    private var currentUserProfile: UserProfile? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityAdminBinding.inflate(layoutInflater)
        setContentView(binding.root)

        val roomTitle = intent.getStringExtra("room_title")
        if (roomTitle == null) {
            Toast.makeText(this, "Î∞© Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            finish()
            return
        }

        setupToolbar(roomTitle)
        setupRecyclerView()
        observeViewModel()

        binding.buttonCloseAdminPage.setOnClickListener { finish() }
    }

    private fun setupToolbar(title: String) {
        binding.toolbarAdmin.title = title
        setSupportActionBar(binding.toolbarAdmin)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        supportActionBar?.setDisplayShowTitleEnabled(false)
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.menu_admin, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            android.R.id.home -> {
                finish()
                true
            }
            R.id.action_notify_all -> {
                val roomTitle = (viewModel.roomDetails.value as? ApiResult.Success)?.data?.title
                if (roomTitle != null) {
                    viewModel.sendBatchStudyReminder(roomTitle)
                } else {
                    Toast.makeText(this, "Î∞© Ï†ïÎ≥¥Í∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun setupRecyclerView() {
        memberAdapter = StudentAdapter { member ->
            showMemberOptionsDialog(member)
        }
        binding.recyclerAdminMemberList.apply {
            layoutManager = LinearLayoutManager(this@AdminActivity)
            adapter = memberAdapter
        }
        attachSwipeToKick()
    }

    private fun observeViewModel() {
        viewModel.userProfile.observe(this) { profile ->
            currentUserProfile = profile

            if (profile != null && viewModel.roomDetails.value == null) {
                val roomTitle = intent.getStringExtra("room_title")
                if (roomTitle != null) {
                    // [ÏàòÏ†ï] ÏùºÌöåÏÑ± Î°úÎìú ÎåÄÏã†, Ïã§ÏãúÍ∞Ñ Î¶¨Ïä§ÎÑàÎ•º ÏãúÏûëÌï©ÎãàÎã§.
                    viewModel.startListeningToRoom(roomTitle)
                }
            }
        }

        viewModel.roomDetails.observe(this) { result ->
            when (result) {
                is ApiResult.Loading -> binding.progressBar.visibility = View.VISIBLE
                is ApiResult.Success -> {
                    binding.progressBar.visibility = View.GONE
                    updateUi(result.data)
                    // ÏÉàÎ°úÏö¥ Î¶¨Ïä§Ìä∏ Ï†ïÎ†¨Ìï¥ÏÑú Ï†ÑÎã¨
                    val sorted = result.data.members
                        .sortedByDescending { it.progressRate }  // ÏßÑÎèÑÏú® ÎÇ¥Î¶ºÏ∞®Ïàú
                    memberAdapter.submitList(sorted)
                    // Î©§Î≤Ñ Ïú†Î¨¥Ïóê Îî∞Î•∏ UI Ï≤òÎ¶¨
                    binding.textAdminEmptyMembers.visibility = if (result.data.members.isEmpty()) View.VISIBLE else View.GONE
                    binding.recyclerAdminMemberList.visibility = if (result.data.members.isEmpty()) View.GONE else View.VISIBLE
                }
                is ApiResult.Error -> {
                    binding.progressBar.visibility = View.GONE
                    Toast.makeText(this, "Ïò§Î•ò: ${result.message}", Toast.LENGTH_SHORT).show()
                }
                else -> binding.progressBar.visibility = View.GONE
            }
        }

        viewModel.message.observe(this) { msg ->
            msg?.let {
                Toast.makeText(this, it, Toast.LENGTH_SHORT).show()
                viewModel.clearMessage()
            }
        }

        // [ÏàòÏ†ï] Í∞ïÌá¥ Îì± ÏûëÏóÖ ÏÑ±Í≥µ Ïãú, Îçî Ïù¥ÏÉÅ ÏàòÎèôÏúºÎ°ú Îç∞Ïù¥ÌÑ∞Î•º ÏÉàÎ°úÍ≥†Ïπ®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.
        // FirestoreÏùò Î≥ÄÍ≤ΩÏù¥ Î¶¨Ïä§ÎÑàÎ•º ÌÜµÌï¥ ÏûêÎèôÏúºÎ°ú Í∞êÏßÄÎêòÏñ¥ UIÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏Îê©ÎãàÎã§.
        viewModel.operationResult.observe(this) { result ->
            // ÌïÑÏöîÌïòÎã§Î©¥ Ïó¨Í∏∞ÏÑú ÏÑ±Í≥µ/Ïã§Ìå®Ïóê ÎåÄÌïú Ï∂îÍ∞ÄÏ†ÅÏù∏ UI Ï≤òÎ¶¨ Í∞ÄÎä•
        }
    }

    private fun updateUi(room: StudyRoom) {
        binding.textAdminRoomTitleToolbar.text = room.title
        binding.textAdminNicknameBanner.text = room.ownerNickname

        val ownerProfile = room.members.find { it.userId == room.ownerId }
        Glide.with(this)
            .load(ownerProfile?.profileImage ?: R.drawable.ic_profile_default)
            .circleCrop()
            .into(binding.imageAdminProfileBanner)
    }

    private fun showMemberOptionsDialog(member: StudyMemberProfile) {
        val room = (viewModel.roomDetails.value as? ApiResult.Success)?.data ?: return
        val currentUser = currentUserProfile ?: return

        if (member.userId == currentUser.numericId) return
        if (room.ownerId != currentUser.numericId) {
            Toast.makeText(this, "Î∞©Ïû•Îßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî Í∏∞Îä•ÏûÖÎãàÎã§.", Toast.LENGTH_SHORT).show()
            return
        }

        val options = mutableListOf<String>()
        if (!member.isAttendedToday) {
            options.add("üìö ÌïôÏäµ ÎèÖÏ¥âÌïòÍ∏∞")
        }
        if (member.userId != room.ownerId) {
            options.add("üö´ Í∞ïÌá¥ÌïòÍ∏∞")
        }

        if (options.isEmpty()) {
            Toast.makeText(this, "Ï†ÅÏö©Ìï† Ïàò ÏûàÎäî ÎèôÏûëÏù¥ ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            return
        }

        AlertDialog.Builder(this)
            .setTitle(member.nickname)
            .setItems(options.toTypedArray()) { _, which ->
                when (options[which]) {
                    "üìö ÌïôÏäµ ÎèÖÏ¥âÌïòÍ∏∞" -> viewModel.sendStudyReminder(room.title, member.userId)
                    "üö´ Í∞ïÌá¥ÌïòÍ∏∞" -> showKickConfirmDialog(room.title, member)
                }
            }.show()
    }

    private fun showKickConfirmDialog(roomTitle: String, member: StudyMemberProfile) {
        AlertDialog.Builder(this)
            .setTitle("${member.nickname}ÎãòÏùÑ Í∞ïÌá¥ÏãúÌÇ§Í≤†ÏäµÎãàÍπå?")
            .setMessage("Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.")
            .setPositiveButton("ÌôïÏù∏") { _, _ -> viewModel.kickMember(roomTitle, member.userId) }
            .setNegativeButton("Ï∑®ÏÜå", null)
            .show()
    }

    private fun attachSwipeToKick() {
        val itemTouchHelperCallback = object : ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT) {
            override fun onMove(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder, target: RecyclerView.ViewHolder): Boolean = false
            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {
                val position = viewHolder.adapterPosition
                if (position != RecyclerView.NO_POSITION) {
                    val member = memberAdapter.getMemberAt(position)
                    val roomTitle = (viewModel.roomDetails.value as? ApiResult.Success)?.data?.title

                    if (member != null && roomTitle != null) {
                        showKickConfirmDialog(roomTitle, member)
                    }
                }
            }

            override fun getSwipeDirs(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder): Int {
                val room = (viewModel.roomDetails.value as? ApiResult.Success)?.data ?: return 0
                val member = memberAdapter.getMemberAt(viewHolder.adapterPosition) ?: return 0
                val currentUser = currentUserProfile ?: return 0
                return if (room.ownerId == currentUser.numericId && member.userId != room.ownerId) {
                    ItemTouchHelper.LEFT
                } else {
                    0
                }
            }

            override fun onChildDraw(c: Canvas, recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder, dX: Float, dY: Float, actionState: Int, isCurrentlyActive: Boolean) {
                RecyclerViewSwipeDecorator.Builder(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive)
                    .addSwipeLeftBackgroundColor(Color.parseColor("#F44336"))
                    .addSwipeLeftActionIcon(R.drawable.ic_delete_sweep)
                    .addSwipeLeftLabel("Í∞ïÌá¥")
                    .setSwipeLeftLabelColor(Color.WHITE)
                    .create()
                    .decorate()
                super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive)
            }
        }
        ItemTouchHelper(itemTouchHelperCallback).attachToRecyclerView(binding.recyclerAdminMemberList)
    }
}